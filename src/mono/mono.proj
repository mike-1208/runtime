<Project>
  <Import Project="Directory.Build.props" />
  <Import Project="Directory.Build.targets" />

  <PropertyGroup>
    <MonoObjDir>$(ArtifactsObjDir)mono/$(PlatformConfigPathPart)/</MonoObjDir>
    <MonoEnableLLVM Condition=" '$(MonoEnableLLVM)' == '' ">false</MonoEnableLLVM>
    <TestHostPath>$(ArtifactsDir)bin\testhost\$(NetCoreAppCurrent)-$(OSGroup)-$(Configuration)-$(Platform)</TestHostPath>
    <DotNetExec Condition="'$(OS)' == 'Windows_NT'">dotnet.exe</DotNetExec>
    <DotNetExec Condition="'$(DotNetExec)' == ''">dotnet</DotNetExec>
    <LocalDotnetDir>..\..\.dotnet</LocalDotnetDir>
    <LocalDotnet>$(LocalDotnetDir)\$(DotNetExec)</LocalDotnet>
  </PropertyGroup>

  <!-- OSX/Linux Mono runtime build -->
  <Target Name="ConfigureMonoRuntimeUnix" Condition="'$(OS)' != 'Windows_NT'" Inputs="$(MonoProjectRoot)configure.ac" Outputs="$(MonoObjDir)config.h">
      <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
        <_MonoExtraCFLAGS>-O0 -ggdb3 -fno-omit-frame-pointer</_MonoExtraCFLAGS>
        <_MonoExtraCXXFLAGS>-O0 -ggdb3 -fno-omit-frame-pointer</_MonoExtraCXXFLAGS>
        <_MonoConfigureParams>--enable-checked-build=private_types</_MonoConfigureParams>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
        <_MonoExtraCFLAGS>-O2 -g</_MonoExtraCFLAGS>
        <_MonoExtraCXXFLAGS>-O2 -g</_MonoExtraCXXFLAGS>
    </PropertyGroup>
    <PropertyGroup>
        <_MonoConfigureParams Condition="$(MonoEnableLLVM) == true">$(_MonoConfigureParams) --enable--llvm </_MonoConfigureParams>
        <_MonoConfigureParams>$(_MonoConfigureParams) --with-core=only CC=clang CXX=clang++ CFLAGS="$(_MonoExtraCFLAGS)" CXXFLAGS="$(_MonoExtraCXXFLAGS)"</_MonoConfigureParams>
    </PropertyGroup>

    <Message Text="Configuring Mono with '$(_MonoConfigureParams)'" Importance="High" />
    <MakeDir Directories="$(MonoObjDir)" />
    <Exec Command="NOCONFIGURE=1 $(MonoProjectRoot)autogen.sh" />
    <Exec Command="$(MonoProjectRoot)configure $(_MonoConfigureParams)" WorkingDirectory="$(MonoObjDir)" />
    <Touch Files="$(MonoObjDir)config.h" />
  </Target>

  <Target Name="BuildMonoRuntimeUnix" Condition="'$(OS)' != 'Windows_NT'" DependsOnTargets="ConfigureMonoRuntimeUnix">
    <Exec Command="make -j8" IgnoreStandardErrorWarningFormat="true" WorkingDirectory="$(MonoObjDir)" />
  </Target>

  <!-- Windows Mono runtime build -->
  <Target Name="BuildMonoRuntimeWindows" Condition="'$(OS)' == 'Windows_NT'">
    <PropertyGroup>
        <_MonoBuildParams>/p:MONO_BUILD_DIR_PREFIX=&quot;&quot;$(MonoObjDir)&quot;&quot; /p:MONO_ENABLE_NETCORE=true /p:CL_MPCount=8 /v:minimal</_MonoBuildParams>
        <_MonoBuildParams Condition="$(MonoEnableLLVM) == true">/p:MONO_ENABLE_LLVM=true $(_MonoBuildParams)</_MonoBuildParams>
        <_MonoBuildPlatform Condition="'$(Platform)' == 'x64'">x64</_MonoBuildPlatform>
        <_MonoBuildPlatform Condition="'$(Platform)' == 'x86'">win32</_MonoBuildPlatform>
    </PropertyGroup>
    <Exec Command="msvc\run-msbuild.bat build $(_MonoBuildPlatform) $(Configuration) sgen &quot;$(_MonoBuildParams)&quot; msvc\mono-netcore.sln" IgnoreStandardErrorWarningFormat="true" />
  </Target>

  <!-- General targets -->
  <Target Name="Build" DependsOnTargets="BuildMonoRuntimeUnix;BuildMonoRuntimeWindows">
    <PropertyGroup>
      <_MonoRuntimeFilePath Condition="'$(TargetsWindows)' == 'true' and '$(Platform)' == 'x64'">$(MonoObjDir)x64\Bin\$(Configuration)\mono-2.0-sgen.dll</_MonoRuntimeFilePath>
      <_MonoRuntimeFilePath Condition="'$(TargetsWindows)' == 'true' and '$(Platform)' == 'x86'">$(MonoObjDir)Win32\Bin\$(Configuration)\mono-2.0-sgen.dll</_MonoRuntimeFilePath>
      <_MonoRuntimeFilePath Condition="'$(TargetsOSX)' == 'true'">$(MonoObjDir)mono\mini\.libs\libmonosgen-2.0.dylib</_MonoRuntimeFilePath>
      <_MonoRuntimeFilePath Condition="'$(_MonoRuntimeFilePath)' == ''">$(MonoObjDir)mono\mini\.libs\libmonosgen-2.0.so</_MonoRuntimeFilePath>
      <_CoreClrFileName Condition="'$(TargetsWindows)' == 'true'">coreclr.dll</_CoreClrFileName>
      <_CoreClrFileName Condition="'$(TargetsOSX)' == 'true'">libcoreclr.dylib</_CoreClrFileName>
      <_CoreClrFileName Condition="'$(_CoreClrFileName)' == ''">libcoreclr.so</_CoreClrFileName>

    </PropertyGroup>

    <!-- Copy Mono runtime files to artifacts directory -->
    <ItemGroup>
      <_MonoRuntimeArtifacts Include="$(_MonoRuntimeFilePath)">
        <Destination>$(BinDir)$(_CoreClrFileName)</Destination>
      </_MonoRuntimeArtifacts>
    </ItemGroup>

    <Copy SourceFiles="@(_MonoRuntimeArtifacts)"
          DestinationFiles="%(_MonoRuntimeArtifacts.Destination)"
          SkipUnchangedFiles="true" />

  </Target>

  <Target Name="Restore">
    <MSBuild Projects="$(MonoProjectRoot)netcore\nuget\packages.builds" Targets="Restore" />
  </Target>

  <Target Name="Pack">
    <MSBuild Projects="$(MonoProjectRoot)netcore\nuget\packages.builds" Targets="Build" />
  </Target>

  <Target Name="Test" />

  <!-- Copy Mono runtime bits to the local .dotnet dir for local experiments (temp solution) -->
  <Target Name="PatchLocalDotnet" DependsOnTargets="ValidateTestHost">
    <PropertyGroup>
      <LocalDotnetRuntimeDir>$([System.IO.Directory]::GetDirectories("$(LocalDotnetDir)\shared\Microsoft.NETCore.App")[0])</LocalDotnetRuntimeDir>
    </PropertyGroup>
    <ItemGroup>
      <_MonoRuntimeArtifacts Include="$(BinDir)\*.*" />
    </ItemGroup>

    <Copy SourceFiles="@(_MonoRuntimeArtifacts)"
        DestinationFolder="$(LocalDotnetRuntimeDir)"
        SkipUnchangedFiles="true" />
  </Target>

  <Target Name="PatchTestHost" DependsOnTargets="ValidateTestHost">
    <ItemGroup>
      <_MonoRuntimeArtifacts Include="$(BinDir)\*.*" />
    </ItemGroup>
    <Copy SourceFiles="@(_MonoRuntimeArtifacts)"
          DestinationFolder="$(TestHostPath)\shared\Microsoft.NETCore.App\$(ProductVersion)" 
          SkipUnchangedFiles="true"/>
  </Target>

  <!-- Run netcore\sample\HelloWorld sample using Mono Runtime -->
  <Target Name="RunSample" DependsOnTargets="ValidateTestHost;PatchTestHost">
    <MSBuild Projects="$(MonoProjectRoot)netcore\sample\HelloWorld\HelloWorld.csproj" Targets="Restore;Build" />
    <Exec Command="$(TestHostPath)\$(DotNetExec) $(MonoProjectRoot)netcore\sample\HelloWorld\bin\HelloWorld.dll" />
  </Target>

  <!-- Run CoreCLR runtime test using testhost -->
  <Target Name="RunCoreClrTest" DependsOnTargets="ValidateTestHost;PatchTestHost">
    <Error Condition="$(CoreClrTest) == ''" Text="'CoreClrTest' is not set. E.g. set it to `$(ArtifactsDir)tests/coreclr/Windows_NT.x64.Checked/JIT/opt/InstructionCombining/DivToMul/DivToMul.sh` in order to run DivToMul test." />
    <PropertyGroup>
      <CORE_ROOT>$(TestHostPath)</CORE_ROOT>
    </PropertyGroup>
    <Exec Command="$(CoreClrTest)"/>
  </Target>

  <Target Name="RunCoreClrTests" DependsOnTargets="ValidateTestHost;PatchTestHost">
    <PropertyGroup>
      <CORE_ROOT>$(TestHostPath)</CORE_ROOT>
      <ScriptExt Condition="'$(OS)' == 'Windows_NT'">.cmd</ScriptExt>
      <ScriptExt Condition="'$(OS)' != 'Windows_NT'">.sh</ScriptExt>
    </PropertyGroup>
    <Exec Command="..\coreclr\tests\runtest$(ScriptExt) checked" ContinueOnError="WarnAndContinue" />
  </Target>

  <Target Name="RunBenchmarks">
    <Error Condition="$(BenchmarksRepo) == ''" Text="BenchmarksRepo variable is not set" />
    <Exec WorkingDirectory="$(BenchmarksRepo)\src\benchmarks\micro" Command="$(LocalDotnet) run -c Release -f $(NetCoreAppCurrent) --cli $(LocalDotnet)" />
  </Target>

  <Target Name="ValidateTestHost">
    <Error Condition="!Exists('$(LocalDotnet)')" Text="'$(LocalDotnet)' doesn't exist." />
    <Error Condition="!Exists('$(TestHostPath)')" Text="'$(TestHostPath)' doesn't exist. Try to set Configuration, OSGroup and Platform variables if neccesary." />
  </Target>

</Project>
